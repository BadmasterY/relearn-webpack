(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{158:function(e,a,n){"use strict";n.r(a),function(e){n.d(a,"default",(function(){return d}));var t,c=n(85),p=(n(127),n(0),n(86));function b(){return(b=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}function o(e,a){if(null==e)return{};var n,t,c=function(e,a){if(null==e)return{};var n,t,c={},p=Object.keys(e);for(t=0;t<p.length;t++)n=p[t],a.indexOf(n)>=0||(c[n]=e[n]);return c}(e,a);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(t=0;t<p.length;t++)n=p[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}(t="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&t(e);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var r,i,s=function(e){return function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(p.b)("div",a)}},l=s("MdAlert"),m={};function d(e){var a=e.components,n=o(e,["components"]);return Object(p.b)("wrapper",b({},m,n,{components:a,mdxType:"MDXLayout"}),Object(p.b)("h2",{className:"__internal",id:"tree-shaking"},"Tree shaking",Object(p.b)("a",b({parentName:"h2"},{href:"#tree-shaking","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,Object(p.b)("strong",{parentName:"p"},Object(p.b)("inlineCode",{parentName:"strong"},"Tree shaking"))," 是 ",Object(p.b)("inlineCode",{parentName:"p"},"ES2015")," 模块定义启用的功能。其思想是, 如果可以在不运行模块的情况下静态地分析模块定义, ",Object(p.b)("inlineCode",{parentName:"p"},"webpack")," 可以判断出代码的哪些部分正在被使用, 哪些部分没有被使用。可以通过扩展应用程序并添加应该剔除的代码来验证这种行为。"),Object(p.b)("p",null,"从 ",Object(p.b)("inlineCode",{parentName:"p"},"webpack 5")," 开始, ",Object(p.b)("inlineCode",{parentName:"p"},"tree shaking")," 得到了改进, 它可以在以前不起作用的情况下工作, 包括嵌套和 ",Object(p.b)("inlineCode",{parentName:"p"},"CommonJS"),"。"),Object(p.b)("blockquote",null,Object(p.b)("p",{parentName:"blockquote"},"译者注: ",Object(p.b)("inlineCode",{parentName:"p"},"Tree shaking")," 的核心思想就是通过静态分析, 剔除未使用/永远不会执行的代码。参考摇晃苹果树, 获取苹果的操作。")),Object(p.b)("h3",{className:"__internal",id:"演示-tree-shaking"},"演示 tree shaking",Object(p.b)("a",b({parentName:"h3"},{href:"#%E6%BC%94%E7%A4%BA-tree-shaking","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"要进行演示, 您必须定义一个模块并仅使用其代码的一部分:"),Object(p.b)("p",null,Object(p.b)("strong",{parentName:"p"},"src/shake.js")),Object(p.b)("div",{className:"rcpress-highlight","data-language":"js"},Object(p.b)("pre",b({parentName:"div"},{className:"language-js"}),Object(p.b)("code",b({parentName:"pre"},{className:"language-js"}),Object(p.b)("span",b({parentName:"code"},{className:"token keyword"}),"const")," ",Object(p.b)("span",b({parentName:"code"},{className:"token function-variable function"}),"shake")," ",Object(p.b)("span",b({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",b({parentName:"code"},{className:"token operator"}),"=>")," console",Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",b({parentName:"code"},{className:"token function"}),"log"),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",b({parentName:"code"},{className:"token string"}),'"shake"'),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",b({parentName:"code"},{className:"token keyword"}),"const")," ",Object(p.b)("span",b({parentName:"code"},{className:"token function-variable function"}),"bake")," ",Object(p.b)("span",b({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",b({parentName:"code"},{className:"token operator"}),"=>")," console",Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",b({parentName:"code"},{className:"token function"}),"log"),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",b({parentName:"code"},{className:"token string"}),'"bake"'),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(p.b)("span",b({parentName:"code"},{className:"token keyword"}),"export")," ",Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),"{")," shake",Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),",")," bake ",Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),";")))),Object(p.b)("p",null,"为了确保使用部分代码, 请修改 ",Object(p.b)("inlineCode",{parentName:"p"},"index.js")," 文件:"),Object(p.b)("p",null,Object(p.b)("strong",{parentName:"p"},"src/index.js")),Object(p.b)("div",{className:"rcpress-highlight","data-language":"js"},Object(p.b)("pre",b({parentName:"div"},{className:"language-js"}),Object(p.b)("code",b({parentName:"pre"},{className:"language-js"}),Object(p.b)("span",b({parentName:"code"},{className:"token operator"}),"..."),Object(p.b)("span",b({parentName:"code"},{className:"token operator"}),"..."),"\n",Object(p.b)("span",b({parentName:"code"},{className:"token keyword"}),"import")," ",Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),"{")," bake ",Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),"}")," ",Object(p.b)("span",b({parentName:"code"},{className:"token keyword"}),"from")," ",Object(p.b)("span",b({parentName:"code"},{className:"token string"}),'"./shake"'),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(p.b)("span",b({parentName:"code"},{className:"token function"}),"bake"),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",b({parentName:"code"},{className:"token punctuation"}),";")))),Object(p.b)("p",null,"如果您再次构建项目(",Object(p.b)("inlineCode",{parentName:"p"},"npm run build"),")并检查构建(",Object(p.b)("inlineCode",{parentName:"p"},"dist/main.js"),"), 则该项目应包含 ",Object(p.b)("inlineCode",{parentName:"p"},'console.log("bake")'),", 但会丢失 ",Object(p.b)("inlineCode",{parentName:"p"},'console.log("shake")'),"。那证明 ",Object(p.b)("inlineCode",{parentName:"p"},"tree shaking")," 正常工作。"),Object(p.b)("p",null,"要更好地了解 ",Object(p.b)("inlineCode",{parentName:"p"},"webpack")," 用于 ",Object(p.b)("inlineCode",{parentName:"p"},"tree shaking")," 的过程, 请运行 ",Object(p.b)("inlineCode",{parentName:"p"},"npm run build -- --display-used-exports"),"。您应该在终端中看到类似 ",Object(p.b)("inlineCode",{parentName:"p"},"[no exports used]")," 或的其他输出 ",Object(p.b)("inlineCode",{parentName:"p"},"[only some exports used: bake]"),"。"),Object(p.b)(l,b({message:" ",type:"info"},{mdxType:"MdAlert"}),Object(p.b)("p",{parentName:"MdAlert"},"如果您使用的是 ",Object(p.b)("strong",{parentName:"p"},Object(p.b)("inlineCode",{parentName:"strong"},"terser-webpack-plugin")),", 请启用警告以达到类似效果。除了其他消息外, 您还应该看到类似的消息 ",Object(p.b)("inlineCode",{parentName:"p"},"Dropping unused variable treeShakingDemo [./src/component.js:17,6]"),"。")),Object(p.b)(l,b({message:" ",type:"warning"},{mdxType:"MdAlert"}),Object(p.b)("p",{parentName:"MdAlert"},"要使 ",Object(p.b)("inlineCode",{parentName:"p"},"tree shaking")," 与 ",Object(p.b)("inlineCode",{parentName:"p"},"TypeScript")," 一起使用, 必须将设置 ",Object(p.b)("inlineCode",{parentName:"p"},"compilerOptions.module")," 为 ",Object(p.b)("inlineCode",{parentName:"p"},"es2015")," 或其他等效配置。想法是保留 ",Object(p.b)("inlineCode",{parentName:"p"},"ES2015")," 模块定义以供 ",Object(p.b)("inlineCode",{parentName:"p"},"webpack")," 处理, 因为它具备需要用于 ",Object(p.b)("inlineCode",{parentName:"p"},"tree shaking")," 的信息。")),Object(p.b)("h3",{className:"__internal",id:"软件包级别的-tree-shaking"},"软件包级别的 tree shaking",Object(p.b)("a",b({parentName:"h3"},{href:"#%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%BA%A7%E5%88%AB%E7%9A%84-tree-shaking","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"同样的想法也适用于使用 ",Object(p.b)("inlineCode",{parentName:"p"},"ES2015")," 模块定义的依赖项。考虑到相关的软件包, 标准仍在不断定制, 您在使用此类软件包时必须小心。",Object(p.b)("inlineCode",{parentName:"p"},"Webpack")," 尝试解析 ",Object(p.b)("inlineCode",{parentName:"p"},"pakcage.json")," ",Object(p.b)("inlineCode",{parentName:"p"},"module")," 字段。"),Object(p.b)("p",null,"对于像 ",Object(p.b)("inlineCode",{parentName:"p"},"webpack")," 这样的工具, 允许 ",Object(p.b)("inlineCode",{parentName:"p"},"tree shaking")," ",Object(p.b)("inlineCode",{parentName:"p"},"npm")," 包, 您应该生成一个构建, 该构建将除 ",Object(p.b)("inlineCode",{parentName:"p"},"ES2015")," 模块定义之外的所有其他内容都转换, 然后通过 ",Object(p.b)("inlineCode",{parentName:"p"},"package.json")," ",Object(p.b)("inlineCode",{parentName:"p"},"module")," 字段指向它。在 ",Object(p.b)("inlineCode",{parentName:"p"},"Babel")," 术语中, 您必须让 ",Object(p.b)("inlineCode",{parentName:"p"},"webpack")," 通过配置 ",Object(p.b)("inlineCode",{parentName:"p"},'"modules": false')," 来管理 ",Object(p.b)("inlineCode",{parentName:"p"},"ES2015")," 模块。"),Object(p.b)("p",null,"另一个重要的点是设置 ",Object(p.b)("inlineCode",{parentName:"p"},'"sideEffects": false')," 表示在代码执行时, 它不会修改其自身范围之外的任何内容。如果您想更具体一些, 该属性还接受一个文件路径数组。",Object(p.b)("a",b({parentName:"p"},{href:"https://stackoverflow.com/questions/49160752/what-does-webpack-4-expect-from-a-package-with-sideeffects-false",target:"_blank"}),"与此相关的 ",Object(p.b)("inlineCode",{parentName:"a"},"StackOverflow")," 问题详细解释了原因"),"。"),Object(p.b)("h3",{className:"__internal",id:"外部软件包-tree-shaking"},"外部软件包 tree shaking",Object(p.b)("a",b({parentName:"h3"},{href:"#%E5%A4%96%E9%83%A8%E8%BD%AF%E4%BB%B6%E5%8C%85-tree-shaking","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"为了最大限度地利用外部软件包进行 ",Object(p.b)("inlineCode",{parentName:"p"},"tree shaking"),", 您必须使用 ",Object(p.b)("a",b({parentName:"p"},{href:"https://www.npmjs.com/package/babel-plugin-transform-imports",target:"_blank"}),"babel-plugin-transform-imports")," 重写 ",Object(p.b)("inlineCode",{parentName:"p"},"import"),", 以便它们与 ",Object(p.b)("inlineCode",{parentName:"p"},"webpack")," 的 ",Object(p.b)("inlineCode",{parentName:"p"},"tree shaking")," 逻辑配合使用。有关更多信息, 请参见 ",Object(p.b)("a",b({parentName:"p"},{href:"https://github.com/webpack/webpack/issues/2867",target:"_blank"}),"webpack issue 2867"),"。"),Object(p.b)("p",null,"通过设置带有 ",Object(p.b)("inlineCode",{parentName:"p"},'test: path.resolve(__dirname, "node_modules/package")')," 和 ",Object(p.b)("inlineCode",{parentName:"p"},'"sideEffects": false')," 字段的加载器定义, 可以在 ",Object(p.b)("inlineCode",{parentName:"p"},"webpack")," 配置中强制设置 ",Object(p.b)("inlineCode",{parentName:"p"},'"sideEffects": false'),"。"),Object(p.b)(l,b({message:" ",type:"info"},{mdxType:"MdAlert"}),Object(p.b)("p",{parentName:"MdAlert"},Object(p.b)("a",b({parentName:"p"},{href:"https://survivejs.com/maintenance/packaging/building/",target:"_blank"}),"SurviveJS - Maintenance")," 在软件包的角度深入探讨这个主题。")),Object(p.b)("h3",{className:"__internal",id:"结论"},"结论",Object(p.b)("a",b({parentName:"h3"},{href:"#%E7%BB%93%E8%AE%BA","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"Tree shaking")," 是一种潜在的强大技术。为了让源代码从 ",Object(p.b)("inlineCode",{parentName:"p"},"tree shaking")," 中获益, ",Object(p.b)("inlineCode",{parentName:"p"},"npm")," 包必须使用 ",Object(p.b)("inlineCode",{parentName:"p"},"ES2015")," 模块语法实现, 并且必须通过 ",Object(p.b)("inlineCode",{parentName:"p"},"webpack")," 等工具的 ",Object(p.b)("inlineCode",{parentName:"p"},"package.json")," ",Object(p.b)("inlineCode",{parentName:"p"},"module")," 字段公开 ",Object(p.b)("inlineCode",{parentName:"p"},"ES2015")," 版本。"),Object(p.b)("p",null,"回顾一下:"),Object(p.b)("ul",null,Object(p.b)("li",b({parentName:"ul"},{className:"__internal"}),Object(p.b)("strong",{parentName:"li"},Object(p.b)("inlineCode",{parentName:"strong"},"Tree shaking"))," 会基于静态代码分析丢弃未使用的代码段。",Object(p.b)("inlineCode",{parentName:"li"},"Webpack")," 在遍历依赖关系图时为您执行此过程。"),Object(p.b)("li",b({parentName:"ul"},{className:"__internal"}),"要从 ",Object(p.b)("inlineCode",{parentName:"li"},"tree shaking")," 中受益, 您必须使用 ",Object(p.b)("inlineCode",{parentName:"li"},"ES2015")," 模块定义。"),Object(p.b)("li",b({parentName:"ul"},{className:"__internal"}),"作为软件包的作者, 您可以提供包含 ",Object(p.b)("inlineCode",{parentName:"li"},"ES2015")," 模块的软件包版本, 而其余版本已转换为 ",Object(p.b)("inlineCode",{parentName:"li"},"ES5"),"。设置 ",Object(p.b)("inlineCode",{parentName:"li"},'"sideEffects": false')," 很重要, 如此设置之后 ",Object(p.b)("inlineCode",{parentName:"li"},"Webpack")," 知道对动软件包使用 ",Object(p.b)("inlineCode",{parentName:"li"},"tree shaking")," 是安全的。")),Object(p.b)("p",null,"在下一章中, 您将学习如何使用 ",Object(p.b)("inlineCode",{parentName:"p"},"webpack")," 管理环境变量。"))}d.isMDXComponent=!0,d=Object(c.hot)(e)(d),(r="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(r.register(s,"makeShortcode","/Users/yuzhoujie/Desktop/work/webpack-book-china/docs/webpack/Optimizing/tree-shaking.md"),r.register(l,"MdAlert","/Users/yuzhoujie/Desktop/work/webpack-book-china/docs/webpack/Optimizing/tree-shaking.md"),r.register(m,"layoutProps","/Users/yuzhoujie/Desktop/work/webpack-book-china/docs/webpack/Optimizing/tree-shaking.md"),r.register("wrapper","MDXLayout","/Users/yuzhoujie/Desktop/work/webpack-book-china/docs/webpack/Optimizing/tree-shaking.md"),r.register(d,"MDXContent","/Users/yuzhoujie/Desktop/work/webpack-book-china/docs/webpack/Optimizing/tree-shaking.md")),(i="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&i(e)}.call(this,n(21)(e))}}]);